package br.com.dfdevforge.sisfintransaction.commons.services;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import br.com.dfdevforge.sisfintransaction.commons.exceptions.BaseException;
import br.com.dfdevforge.sisfintransaction.statement.model.bank.entities.BankEntity;
import br.com.dfdevforge.sisfintransaction.statement.model.bank.repositories.BankRepository;
import br.com.dfdevforge.sisfintransaction.transaction.model.account.entities.AccountEntity;
import br.com.dfdevforge.sisfintransaction.transaction.model.account.repositories.AccountRepository;
import br.com.dfdevforge.sisfintransaction.transaction.model.location.entities.LocationEntity;
import br.com.dfdevforge.sisfintransaction.transaction.model.location.repositories.LocationRepository;
import br.com.dfdevforge.sisfintransaction.transaction.model.paymentmethod.entities.PaymentMethodEntity;
import br.com.dfdevforge.sisfintransaction.transaction.model.paymentmethod.repositories.PaymentMethodRepository;

public abstract class BaseService implements CommonService {
	protected String token;
	protected Map<String, Object> resultMap = new HashMap<>();

	@Autowired private BankRepository bankRepository;
	@Autowired private AccountRepository accountRepository;
	@Autowired private LocationRepository locationRepository;
	@Autowired private PaymentMethodRepository paymentMethodRepository;

	@Override
	public void validateUserAccess() throws BaseException {
		
	}

	@Override
	public void configureUserActions() {
		// If needed, concrete classes must implement this method.
	}

	@Override
	public Map<String, Object> returnBusinessData() {
		return this.resultMap;
	}

	/**
	 * Its purpose is to put in the resulting map any list generated by the business rule.
	 * 
	 * @param artifactName
	 * @param beanList
	 */
	protected void setArtifact(String artifactName, Object artifact) {
		this.resultMap.put(artifactName, artifact);
	}

	protected List<BankEntity> findBanksByUserIdentityOrderByNameAsc(long userIdentity) {
		return this.bankRepository.findByUserIdentityOrderByNameAsc(userIdentity);
	}

	protected List<AccountEntity> findAccountsByUserIdentityOrderByLevel(long userIdentity) {
		return this.accountRepository.findByUserIdentityOrderByLevel(userIdentity);
	}

	protected List<LocationEntity> findLocationsByUserIdentityOrderByNameAsc(long userIdentity) {
		return this.locationRepository.findByUserIdentityOrderByNameAsc(userIdentity);
	}

	protected List<PaymentMethodEntity> findPaymentMethodsByUserIdentityOrderByNameAsc(long userIdentity) {
		return this.paymentMethodRepository.findByUserIdentityOrderByNameAsc(userIdentity);
	}
}